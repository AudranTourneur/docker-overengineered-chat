{
  "version": 3,
  "sources": ["../src/server.ts", "../src/common/env.ts", "../src/common/logger.ts", "../src/trpc.ts", "../src/common/metrics.ts", "../src/router.ts", "../src/procedures/getChatMessages.ts", "../src/common/database.ts", "../src/schema.ts", "../src/common/auth.ts", "../src/procedures/registerOrLogin.ts", "../src/procedures/sendChatMessage.ts"],
  "sourcesContent": ["import express from \"express\";\nimport { GlobalEnv } from \"./common/env\";\nimport { GlobalLogger } from \"./common/logger\";\nimport { initAllRoute } from \"./router\";\n\nconst app = express();\ninitAllRoute(app)\n\nconst port = Number(GlobalEnv.WEB_PORT)\napp.listen(port);\n\nGlobalLogger.info(`Back-end application started on port ${port}`);\n", "import dotenv from 'dotenv';\nimport { z } from 'zod';\ndotenv.config();\n\nconst envSchema = z.object({\n    WEB_PORT: z.string().min(1),\n    POSTGRES_URL: z.string().min(1),\n    PROMETHEUS_PORT: z.string().min(1),\n    MINIO_ACCESS_KEY: z.string().min(1),\n    MINIO_SECRET_KEY: z.string().min(1),\n    MINIO_HOST: z.string().min(1),\n    MINIO_PORT: z.string().min(1),\n    LOKI_URL: z.string().min(1),\n})\n\nexport const GlobalEnv = envSchema.parse(process.env);\n", "import winston from 'winston';\n\nexport const GlobalLogger = winston.createLogger({\n  level: 'info',\n  format: winston.format.json(),\n  defaultMeta: { service: 'back' },\n  transports: [\n    //\n    // - Write all logs with importance level of `error` or less to `error.log`\n    // - Write all logs with importance level of `info` or less to `combined.log`\n    //\n    new winston.transports.File({ filename: 'error.log', level: 'error' }),\n    new winston.transports.File({ filename: 'combined.log' }),\n  ],\n});\n\n//\n// If we're not in production then log to the `console` with the format:\n// `${info.level}: ${info.message} JSON.stringify({ ...rest }) `\n//\nif (process.env.NODE_ENV !== 'production') {\n  GlobalLogger.add(new winston.transports.Console({\n    format: winston.format.simple(),\n  }));\n}\n", "import * as trpcExpress from \"@trpc/server/adapters/express\";\nimport { initTRPC } from \"@trpc/server\";\nimport superjson from \"superjson\";\nimport { route_request_duration_seconds } from \"./common/metrics\";\n\n// created for each request\nexport const createContext = () => ({}); // no context\n\nconst t = initTRPC.create({\n  transformer: superjson,\n});\n\nconst loggerMiddleware = t.middleware(async (opts) => {\n    console.log(opts.input)\n\n    const start = Date.now()\n\n    const result = await opts.next()\n\n    const durationMs = Date.now() - start\n    const meta = { path: opts.path, type: opts.type, durationMs }\n\n    result.ok ? console.log('OK request timing:', meta) : console.error('Non-OK request timing', meta)\n\n    route_request_duration_seconds.observe({ path: opts.path }, durationMs / 1000)\n\n    return result\n})\n\nconst baseProcedure = t.procedure\n\nexport const publicProcedure = baseProcedure.use(loggerMiddleware)\n\nexport const router = t.router\n", "import Prometheus from 'prom-client'\nimport express from 'express'\nimport { GlobalEnv } from './env'\n\nconst collectDefaultMetrics = Prometheus.collectDefaultMetrics\nconst prefix = 'app_'\n\nexport const route_request_duration_seconds = new Prometheus.Histogram({\n    name: prefix + 'route_request_duration_seconds',\n    help: 'Duration of requests to the server in seconds',\n    labelNames: ['path'],\n})\n\nexport const database_query_duration_seconds = new Prometheus.Histogram({\n    name: prefix + 'route_query_duration_seconds',\n    help: 'Duration of queries to the database in seconds',\n    labelNames: ['type', 'entity'],\n})\n\nexport async function startMetricsServer() {\n    const app = express()\n    const port = Number(GlobalEnv.PROMETHEUS_PORT)\n\n    app.get('/metrics', async (_req, res) => {\n        console.log('Metrics requested')\n        Prometheus.register.clear()\n        collectDefaultMetrics({ prefix })\n        Prometheus.register.registerMetric(route_request_duration_seconds)\n        res.set('Content-Type', Prometheus.register.contentType)\n        res.end(await Prometheus.register.metrics())\n    })\n    app.listen(port, () => {\n        console.log(`Metrics server listening at http://localhost:${port}/metrics`)\n    })\n}\n", "import { Application } from \"express\";\nimport { publicProcedure, router } from \"./trpc\";\nimport * as trpcExpress from \"@trpc/server/adapters/express\";\nimport { createContext } from \"./trpc\";\nimport { startMetricsServer } from \"./common/metrics\";\nimport { getChatMessages } from \"./procedures/getChatMessages\";\nimport { z } from \"zod\";\nimport { registerOrLogin } from \"./procedures/registerOrLogin\";\nimport { sendChatMessage, sendChatMessageSchema } from \"./procedures/sendChatMessage\";\n\nexport const appRouter = createRouter();\n\nexport type AppRouter = typeof appRouter;\n\nexport async function initAllRoute(app: Application) {\n  app.use(\n    \"/api/trpc\",\n    trpcExpress.createExpressMiddleware({\n      router: appRouter,\n      createContext,\n    })\n  );\n\n  startMetricsServer();\n}\n\nfunction createRouter() {\n  return router({\n    registerOrLogin: publicProcedure.input(z.string().nullable()).mutation(async req => {\n        return await registerOrLogin(req.input);\n    }),\n    getChatMessages: publicProcedure.query(async () => {\n      return await getChatMessages();\n    }),\n    sendChatMessage: publicProcedure.input(sendChatMessageSchema).mutation(async req => {\n        return await sendChatMessage(req.input);\n    })\n  });\n}\n\n\n", "import { eq } from \"drizzle-orm\";\nimport { GlobalDatabaseClient } from \"../common/database\";\nimport { messages, users } from \"../schema\";\n\nexport async function getChatMessages() {\n    //const chatMessages = await GlobalDatabaseClient.select().from(messages).orderBy(messages.createdAt).limit(100);\n    \n    // join with username\n    const chatMessages = await GlobalDatabaseClient.select().from(messages).innerJoin(users, eq(messages.userId, users.id)).orderBy(messages.createdAt).limit(100);\n\n    const chatMessagesWithUsername = chatMessages.map(chatMessage => {\n        if (!chatMessage.users) throw new Error(\"chatMessage.users is null\")\n        if (!chatMessage.messages) throw new Error(\"chatMessage.users is null\")\n        return {\n            id: chatMessage.users.id,\n            messageContent: chatMessage.messages.messageContent,\n            createdAt: chatMessage.messages.createdAt,\n            username: chatMessage.users.username\n        }\n    });\n\n    //console.log('chatMessagesWithUsername', chatMessagesWithUsername);\n\n\n    return chatMessagesWithUsername\n}\n", "import { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\nimport { GlobalEnv } from './env';\n\n// for query purposes\nconst queryClient = postgres(GlobalEnv.POSTGRES_URL);\nconst db = drizzle(queryClient);\n\nexport const GlobalDatabaseClient = db;\n", "import {\n  serial,\n  pgTable,\n  varchar,\n  text,\n  integer,\n  timestamp,\n} from \"drizzle-orm/pg-core\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: varchar(\"username\", { length: 256 }).unique(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const sessions = pgTable(\"sessions\", {\n  token: varchar(\"token\", { length: 256 }).primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const messages = pgTable(\"messages\", {\n  id: serial(\"id\").primaryKey(),\n  messageContent: text(\"message_content\"),\n  userId: integer(\"user_id\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const files = pgTable(\"files\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 256 }).unique(),\n  userId: integer(\"user_id\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n", "import crypto from 'crypto';\nimport { uniqueNamesGenerator, adjectives, colors, animals } from 'unique-names-generator';\nimport { GlobalDatabaseClient } from './database';\nimport { sessions, users } from '../schema';\nimport { eq} from 'drizzle-orm';\n\ntype UserReturn = {\n    id: number,\n    username: string,\n    token: string,\n}\n\nexport async function createUser(): Promise<UserReturn> {\n    const randomName = uniqueNamesGenerator({ dictionaries: [adjectives, colors, animals] });\n\n    const [user] = await GlobalDatabaseClient.insert(users).values({\n        username: randomName,\n    }).returning();\n\n    if (!user || !user.username) {\n        throw new Error('User not created');\n    }\n\n    const token = await createSession(user.id);\n\n    return {\n        id: user.id,\n        username: user.username,\n        token,\n    }\n}\n\nfunction generateCryptographicRandomToken(): string {\n    return crypto.randomBytes(128).toString('hex');\n}\n\nasync function createSession(userId: number): Promise<string> {\n    const token = generateCryptographicRandomToken();\n\n    await GlobalDatabaseClient.insert(sessions).values({\n        token,\n        userId,\n    })\n\n    return token;\n}\n\n\nexport async function resolveSessionTokenIntoUserOrCreateUser(token: string | null): Promise<UserReturn> {\n    if (!token) {\n        console.log('Token null')\n        return await createUser();\n    }\n    const userSessions = await GlobalDatabaseClient.select().from(sessions).where(eq(sessions.token, token)).innerJoin(users, eq(sessions.userId, users.id));\n\n    if (userSessions.length === 0) {\n        console.log('Token not found')\n        return await createUser();\n    }\n\n    console.log('userSession', userSessions);\n\n    const userSession = userSessions[0];\n\n    return {\n        id: userSession.users.id,\n        username: userSession.users.username || '',\n        token,\n    }\n}\n\n\nexport async function resolveSessionTokenIntoUserOrFail(token: string | null): Promise<UserReturn> {\n    if (!token) {\n        throw new Error('Token null')\n    }\n    const userSessions = await GlobalDatabaseClient.select().from(sessions).where(eq(sessions.token, token)).innerJoin(users, eq(sessions.userId, users.id));\n\n    if (userSessions.length === 0) {\n        throw new Error('Token not found')\n    }\n\n    const userSession = userSessions[0];\n\n    return {\n        id: userSession.users.id,\n        username: userSession.users.username || '',\n        token,\n    }\n}\n\n\n", "import { resolveSessionTokenIntoUserOrCreateUser } from \"../common/auth\";\n\nexport async function registerOrLogin(token: string | null) {\n  return await resolveSessionTokenIntoUserOrCreateUser(token);\n}\n", "import { z } from \"zod\";\nimport { GlobalDatabaseClient } from \"../common/database\";\nimport { messages } from \"../schema\";\nimport { resolveSessionTokenIntoUserOrCreateUser, resolveSessionTokenIntoUserOrFail } from \"../common/auth\";\nimport { getChatMessages } from \"./getChatMessages\";\n\nexport const sendChatMessageSchema = z.object({\n    token: z.string(),\n    messageContent: z.string(),\n})\n\ntype SendChatMessageInput = z.infer<typeof sendChatMessageSchema>\n\nexport async function sendChatMessage(input: SendChatMessageInput) {\n    console.log('sendChatMessage', input)\n    const user = await resolveSessionTokenIntoUserOrFail(input.token)\n    console.log('user', user)\n\n    await GlobalDatabaseClient.insert(messages).values({\n        messageContent: input.messageContent,\n        userId: user.id,\n        createdAt: new Date(),\n    })\n\n    return await getChatMessages()\n}\n"],
  "mappings": "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",
  "names": ["express", "app", "port", "z", "eq", "z", "z", "app", "z", "express"]
}
